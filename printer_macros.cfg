[gcode_macro M600]
description: Change the filament mid-print
gcode:
  PAUSE
  {action_respond_info("Filament sensor triggered. Change the filament, then use the RESUME command to continue printing.")}
  M300 P300
  G4 P300
  M300 P300
  G4 P300
  M300 P300

[gcode_macro M300]
description: Emit a beeping tone
gcode:
  # Use a default 1kHz tone if S is omitted.
  {% set S = params.S|default(-1)|int %}
  # Use a 10ms duration is P is omitted.
  {% set P = params.P|default(100)|int %}
  {% set L = 0.5 %}
  {% if S < 0 %}
    {% set L = 1 %}
    {% set S = 1000 %}
  {% endif %}

  SET_PIN PIN=beeper VALUE={L} CYCLE_TIME={ 1.0/S if S > 0 else 1 }
  G4 P{P}
  SET_PIN PIN=beeper VALUE=0

[gcode_macro SETUP_BED_MESH]
description: Warm up bed and calibrate bed mesh
variable_calibrated_temp: 0
gcode:
  {% if 'TEMP' not in params %}
    {action_raise_error("Parameter 'TEMP' missing from 'SETUP_BED_MESH'")}
  {% endif %}

  {% set TEMP = params.TEMP|float|default(0.0) %}
  {% set RECALIBRATE = params.RECALIBRATE|int|default(0) %}

  {% if TEMP <= 0.0 %}
    {action_raise_error("Parameter 'TEMP' is invalid. Must be a value at least 1.")}
  {% endif %}

  {% if printer["gcode_macro SETUP_BED_MESH"].calibrated_temp == TEMP and RECALIBRATE != 1 %}
    {action_respond_info("Bed mesh already calibrated at TEMP=%.1f. Set RECALIBRATE=1 to override." % (TEMP))}
  {% else %}
    # Warm up bed
    M140 S{TEMP}
    # Wait for temperature
    M190 S{TEMP}
    {% if printer.toolhead.homed_axes != 'xyz' %}
      # Home the printer
      G28
    {% endif %}
    # Run bed mesh calibration
    BED_MESH_CALIBRATE

    SET_GCODE_VARIABLE MACRO=SETUP_BED_MESH VARIABLE=calibrated_temp VALUE={TEMP}
    {action_respond_info("Bed mesh calibration complete at TEMP=%.1f" % (TEMP))}
  {% endif %}


[gcode_macro CLEAR_BED_MESH]
description: Clears initialization state of the bed mesh
gcode:
    SET_GCODE_VARIABLE MACRO=SETUP_BED_MESH VARIABLE=calibrated_temp VALUE=0
    {action_respond_info("Bed mesh state cleared")}


[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    SETUP_BED_MESH TEMP={BED_TEMP} RECALIBRATE=0
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}

    CLEAR_PAUSE

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84
    # UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=300

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
# internal variables. do not touch
variable_extruder_temp: 0
variable_bed_temp: 0
variable_fan_speed: 0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}

  {% set extruder_temp = printer.extruder.target|float %}
  {% set bed_temp = printer.heater_bed.target|float %}
  {% set fan_speed = printer.fan.speed * 255 | int %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

  # store state
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE={extruder_temp}
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=bed_temp VALUE={bed_temp}
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=fan_speed VALUE={fan_speed}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}

  {% set extruder_temp = printer["gcode_macro PAUSE"].extruder_temp %}
  {% set bed_temp = printer["gcode_macro PAUSE"].bed_temp %}
  {% set fan_speed = printer["gcode_macro PAUSE"].fan_speed %}

  ##### end of definitions #####

  # restore state
  M190 S{bed_temp} # set and wait for bed temp
  M109 S{extruder_temp} # set and wait for extruder temp
  M106 S{fan_speed} # set fan speed


  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  M84
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  # UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=300

# Powers off the printer in Klipper. Device name is as specified in moonraker.conf
[gcode_macro _POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="Printer",
                             state="off")}

[delayed_gcode _DELAYED_PRINTER_OFF]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    _POWER_OFF_PRINTER
  {% endif %}

# Powers off the printer
# [delayed_gcode POWER_OFF_PRINTER_CHECK]
# gcode:
#   {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
#     {% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 50.0 %}
#         {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
#             UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
#             _POWER_OFF_PRINTER
#         {% else %}
#             UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
#         {% endif %}
#     {% else %}
#         {% if printer.idle_timeout.state == "Printing" %}
#             UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
#         {% else %}
#             {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
#                 UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
#             {% else %}
#                 UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
#             {% endif %}
#         {% endif %}
#     {% endif %}
#   {% endif %}

[gcode_macro DEBUG_LOG]
gcode:
  {action_respond_info("printer.pause_resume.is_paused: %s" % printer.pause_resume.is_paused)}
  {action_respond_info("printer.extruder.target: %s" % printer.extruder.target)}
  {action_respond_info("printer.heater_bed.target: %s" % printer.heater_bed.target)}
  {action_respond_info("printer.fan.speed * 255 | int: %s" % (printer.fan.speed * 255 | int))}
  {action_respond_info("printer.toolhead.homed_axes: %s" % printer.toolhead.homed_axes)}
  
[gcode_macro QUERY_ENCLOSURE_SENSOR]
gcode:
  {% set sensor = printer["htu31d enclosure"] %}
  {action_respond_info(
    "Temperature: %.2f C\n"
    "Humidity: %.2f%%" % (
      sensor.temperature,
        sensor.humidity))}
